// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  ADMIN
  USER
  TEAM
}

model Account {
  id                String   @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?  @db.Text
  access_token      String?  @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?  @db.Text
  session_state     String?
  createdAt         DateTime @default(now()) @map(name: "created_at")
  updatedAt         DateTime @default(now()) @map(name: "updated_at")

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
  @@map(name: "accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@map(name: "sessions")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  phone         String?   @unique
  password      String?
  nationalId    String?
  address       String?
  city          String?
  state         String?
  zipCode       String?
  gender        String?
  emailVerified DateTime?
  image         String?
  teamType      String?
  teamMembers   Json?
  createdAt     DateTime  @default(now()) @map(name: "created_at")
  updatedAt     DateTime  @default(now()) @map(name: "updated_at")
  role          UserRole  @default(USER)

  Complaint Complaint[]
  accounts  Account[]
  sessions  Session[]

  @@map(name: "users")
  PC PC[]
  FC FC[]
  AC AC[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map(name: "verification_tokens")
}

enum complaintStatus {
  INCOMPLETEFORM
  PENDING
  ACTIVE
  INPROGRESS
  RESOLVED
}

model Complaint {
  id                Int             @id @default(autoincrement())
  userId            String
  type              String 
  victimType        String?
  description       String
  dateOfIncident    String
  timeOfIncident    String?
  location          String
  assignedTo        String?
  dateAssigned      String?
  attribute         Json?
  suspectedEntities String? // Optional: Names or descriptions of suspects
  witnesses         String? // Optional: Names and contact details
  status            complaintStatus @default(INCOMPLETEFORM)
  createdAt         DateTime        @default(now()) @map(name: "created_at")
  updatedAt         DateTime        @default(now()) @map(name: "updated_at")

  categorization Categorization[]
  evidence       Evidence[]
  user           User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  Feedback       Feedback[]
}

//Anti curruption 
model AC {
  id                Int             @id @default(autoincrement())
  caseId            String
  userId            String?
  type              String 
  victimType        String?
  description       String
  dateOfIncident    String
  timeOfIncident    String?
  location          String
  assignedTo        String?
  dateAssigned      String?
  attribute         Json?
  suspectedEntities String? // Optional: Names or descriptions of suspects
  witnesses         String? // Optional: Names and contact details
  status            complaintStatus @default(INCOMPLETEFORM)
  createdAt         DateTime        @default(now()) @map(name: "created_at")
  updatedAt         DateTime        @default(now()) @map(name: "updated_at")

  categorization Categorization[]
  evidence       Evidence[]
  user           User?             @relation(fields: [userId], references: [id], onDelete: Cascade)
  Feedback       Feedback[]
}

//Finicial Chrime
model FC {
  id                Int             @id @default(autoincrement())
  caseId            String
  userId            String?
  type              String 
  victimType        String?
  description       String
  dateOfIncident    String
  timeOfIncident    String?
  location          String
  assignedTo        String?
  dateAssigned      String?
  attribute         Json?
  suspectedEntities String? // Optional: Names or descriptions of suspects
  witnesses         String? // Optional: Names and contact details
  status            complaintStatus @default(INCOMPLETEFORM)
  createdAt         DateTime        @default(now()) @map(name: "created_at")
  updatedAt         DateTime        @default(now()) @map(name: "updated_at")

  categorization Categorization[]
  evidence       Evidence[]
  user           User?            @relation(fields: [userId], references: [id], onDelete: Cascade)
  Feedback       Feedback[]
}


//Personal Complaints
model PC {
  id                Int             @id @default(autoincrement())
  caseId            String
  userId            String?
  type              String 
  victimType        String?
  description       String
  dateOfIncident    String
  timeOfIncident    String?
  location          String
  assignedTo        String?
  dateAssigned      String?
  attribute         Json?
  suspectedEntities String? // Optional: Names or descriptions of suspects
  witnesses         String? // Optional: Names and contact details
  status            complaintStatus @default(INCOMPLETEFORM)
  createdAt         DateTime        @default(now()) @map(name: "created_at")
  updatedAt         DateTime        @default(now()) @map(name: "updated_at")

  categorization Categorization[]
  evidence       Evidence[]
  user           User?             @relation(fields: [userId], references: [id], onDelete: Cascade)
  Feedback       Feedback[]
}

model Evidence {
  id          Int       @id @default(autoincrement())
  type        String // Image, Video, Audio, Document
  fileUrl     String // URL to the uploaded file
  description String?
  evidencedata Json?
  complaintId Int
  complaint   Complaint @relation(fields: [complaintId], references: [id])
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  PC PC[]

  FC FC[]

  AC AC[]
}

model Categorization {
  id             Int       @id @default(autoincrement())
  natureOfCrime  String // Fraud, Assault, Bribery, Cybercrime, etc.
  victimType     String // Individual, Business, Government Entity
  recurringIssue Boolean
  previousReport Boolean
  policeStation  String? // Optional: Name of previously contacted station
  caseReference  String? // Optional: Reference number of the previous case
  complaintId    Int
  complaint      Complaint @relation(fields: [complaintId], references: [id])
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt

  PC PC[]

  FC FC[]

  AC AC[]
}

model Feedback {
  id          Int       @id @default(autoincrement())
  complaintId Int
  complaint   Complaint @relation(fields: [complaintId], references: [id])
  source      String? // How the user learned about SPFACC
  suggestions String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  PC PC[]

  FC FC[]

  AC AC[]
}
